module List.Reverse where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__list_reverse__1 :: ErlangFun
erlps__list_reverse__1 [l_0] =
  let   
    arg_3 =
      ErlangFun 2
        (let
           lambda_4 [e_7, cont_8] =
             ErlangFun 1
               (let
                  lambda_9 [x_11] =
                    BIF.erlang__apply__2
                      [cont_8, ErlangCons (ErlangCons e_7 x_11) ErlangEmptyList]
                  lambda_9 [arg_10] = EXC.function_clause unit
                  lambda_9 args = EXC.badarity (ErlangFun 1 lambda_9) args
                in lambda_9)
           lambda_4 [arg_5, arg_6] = EXC.function_clause unit
           lambda_4 args = EXC.badarity (ErlangFun 2 lambda_4) args
         in lambda_4)
  in let
    arg_16 =
      ErlangFun 1
        (let
           lambda_17 [x_19] = x_19
           lambda_17 [arg_18] = EXC.function_clause unit
           lambda_17 args = EXC.badarity (ErlangFun 1 lambda_17) args
         in lambda_17)
  in let
    fun_2 =
      BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
        [arg_3, arg_16, l_0]
  in
    BIF.erlang__apply__2
      [fun_2, ErlangCons ErlangEmptyList ErlangEmptyList]
erlps__list_reverse__1 [arg_21] = EXC.function_clause unit
erlps__list_reverse__1 args =
  EXC.badarity (ErlangFun 1 erlps__list_reverse__1) args