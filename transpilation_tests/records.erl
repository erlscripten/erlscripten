-module(records).
-erlscripten_output(autogenerated_transpilation_tests).
-compile({parse_transform, erlps_parse_transform}).
-compile(nowarn).
-compile(export_all).

-record(empty, {}).
-record(product, {left, right}).
-record(typed, {xd :: dx, dx :: xd}).
-record(defaulted, {no, yep = y, noooo, yeeeep = ';)'}).

some_match(#empty{}) ->
    empty;
some_match(#product{left = Left}) ->
    Left;
some_match(#typed{xd = Xd, dx = Dx}) ->
    {Xd, Dx};
some_match(#defaulted{yeeeep = YYY, yep = Y}) ->
    {Y, YYY}.

test_build_1() ->
    #empty{}.
test_build_2() ->
    #product{left = l, right = r}.
test_build_3() ->
    #typed{}.
test_build_4() ->
    #defaulted{yep = yyy, no = n}.

test_query_1() ->
    R = test_build_2(),
    R#product.left.
test_query_2() ->
    R = test_build_2(),
    R#product.right.
test_query_3() ->
    R = test_build_3(),
    R#typed.xd.
test_query_4() ->
    R = test_build_4(),
    R#defaulted.no.
test_query_5() ->
    R = test_build_4(),
    R#defaulted.yep.
test_query_6() ->
    R = test_build_4(),
    R#defaulted.noooo.
test_query_7() ->
    R = test_build_4(),
    R#defaulted.yeeeep.

test_update_1() ->
    R = test_build_2(),
    R#product{right = updated}.
test_update_2() ->
    R = test_update_1(),
    R#product{right = reupdated, left = updated_as_well}.
test_update_3() ->
    R = test_build_4(),
    R#defaulted{yep = yepyep}.
test_update_4() ->
    R = test_build_4(),
    R#defaulted{}.
test_update_5() ->
    R = test_build_4(),
    R#defaulted{noooo = nn, yep = lol}.

test_match_1() ->
    some_match(test_build_1()).
test_match_2() ->
    some_match(test_build_2()).
test_match_3() ->
    some_match(test_build_3()).
test_match_4() ->
    some_match(test_build_4()).
test_match_5() ->
    #defaulted{yep = Y, no = N} = #defaulted{},
    {Y, N}.

test_index_1() ->
    #defaulted.yep.
test_index_2() ->
    #product.left.
test_index_3() ->
    #product.right.

test_is_record() ->
    X = #product{left = 1, right = 2},
    Y = 123,
    Z = {product, 1, 2, 3, 4, 5},
    R = product,
    true = is_record(X, product, 3),
    true = is_record(X, R, 3),
    false = is_record(X, R, 31),
    false = is_record(Y, product, 3),
    false = is_record(Y, R, 3),

    true = is_record(X, product),
    true = is_record(X, R),
    true = is_record(Z, R),
    false = is_record(Z, product),
    ok.
