%%%-------------------------------------------------------------------
%%% @author radek
%%% @copyright (C) 2020, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 26. Okt 2020 10:59
%%%-------------------------------------------------------------------
-module(playground).
-author("radek").
-erlscripten_output(autogenerated_transpilation_tests).
-compile({parse_transform, erlps_parse_transform}).
-compile(nowarn).

-compile(export_all).

-record(r, {kek, kok}).

test() ->
    X = #r{kek = 1, kok = 2},
    Y = 123,
    Z = {r, 1, 2, 3, 4, 5},
    R = r,
    true = is_record(X, r, 3),
    true = is_record(X, R, 3),
    false = is_record(X, R, 31),
    false = is_record(Y, r, 3),
    false = is_record(Y, R, 3),

    true = is_record(X, r),
    true = is_record(X, R),
    true = is_record(Z, R),
    false = is_record(Z, r),
    ok.

a(C) when C >= $A, C =< $Z -> C.

b(X) when X >= 0; X =< 1, (X > 20); is_list(X) andalso hd(X) > 20 -> X.

-define(WHITE_SPACE(C),
        is_integer(C) andalso
         (C >= $\000 andalso C =< $\s orelse C >= $\200 andalso C =< $\240)).
c(X) when ?WHITE_SPACE(X) -> X.

-define(HEX(C), C >= $0 andalso C =< $9 orelse
                C >= $A andalso C =< $F orelse
                C >= $a andalso C =< $f).

d(A, B) when ?HEX(A), ?HEX(B) -> A+B.

-define(DIGIT(C), C >= $0 andalso C =< $9).
-define(BASED_DIGIT(C, B),
        ((?DIGIT(C) andalso C < $0 + B)
         orelse (C >= $A andalso B > 10 andalso C < $A + B - 10)
         orelse (C >= $a andalso B > 10 andalso C < $a + B - 10))).

f(A, B, C, D) when ?BASED_DIGIT(A, B) andalso ?BASED_DIGIT(C, D) -> ok.

-record(erl_scan,
        {resword_fun = false,
         ws          = false,
         comment     = false,
         text        = false
        }).

g(St) when St#erl_scan.ws -> St.


-define(UNICODE(C),
        is_integer(C) andalso
         (C >= 0 andalso C < 16#D800 orelse
          C > 16#DFFF andalso C < 16#FFFE orelse
          C > 16#FFFF andalso C =< 16#10FFFF)).

z(X) when ?UNICODE(?UNICODE(X)) -> z(X);
z(X) when ?UNICODE(X+1) -> X-1;
z(X) when ?BASED_DIGIT(X, X); ?BASED_DIGIT(X-1, X+1) -> X;
z(X) when ?WHITE_SPACE(X) -> X;
z(X) when ?UNICODE(X-1) -> X;
z(X) when ?UNICODE(X+1-1) -> X-1;
z(X) when ?BASED_DIGIT(X-1, X) -> X;
z(X) when ?WHITE_SPACE(X-1) -> X;
z(X) when ?HEX(X) -> z(X+1);
z(X) when ?UNICODE(X*2) -> X;
z(X) when ?UNICODE(X+1*2) -> X-1;
z(X) when ?BASED_DIGIT(X*2, X); ?BASED_DIGIT(X-1, X+1) -> X;
z(X) when ?WHITE_SPACE(X*2) -> X;
z(X) when ?UNICODE(X-1*2) -> X;
z(X) when ?UNICODE(X+1-1*2) -> X-1;
z(X) when ?BASED_DIGIT(X-1, X*2) -> X;
z(X) when ?WHITE_SPACE(X-1*2) -> X;
z(X) when ?HEX(X) -> z(X+1*2);
z(St) when St#erl_scan.ws; 2 -> St.

n(00, _, Y, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, Y, 0, 0);
n(01, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 1);
n(02, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 2);
n(03, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 3);
n(04, _, _, _, Z, _, X) when ?UNICODE(X) -> n(1, 0, Z, 0, 0, 0, 4);
n(05, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 5);
n(06, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 6);
n(07, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 7);
n(08, _, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, 0, 0, 0, 0, 8);
n(09, X, _, _, _, _, X) when ?UNICODE(X) -> n(1, 0, X+1, 0, 0, 0, 9);

n(10, _, _, _, _, _, _) -> 10;
n(11, _, _, _, _, _, _) -> 11;
n(12, _, _, _, _, _, _) -> 12;
n(13, _, _, _, _, _, _) -> 13;
n(14, _, _, _, _, _, _) -> 14;
n(15, _, _, _, _, _, _) -> 15;
n(16, _, _, _, _, _, _) -> 16;
n(17, _, _, _, _, _, _) -> 17;
n(18, _, _, _, _, _, _) -> 18;
n(19, _, _, _, _, _, _) -> 19;

n(20, _, _, _, _, _, _) -> 20;
n(21, _, _, _, _, _, _) -> 21;
n(22, _, _, _, _, _, _) -> 22;
n(23, _, _, _, _, _, _) -> 23;
n(24, _, _, _, _, _, _) -> 24;
n(25, _, _, _, _, _, _) -> 25;
n(26, _, _, _, _, _, _) -> 26;
n(27, _, _, _, _, _, _) -> 27;
n(28, _, _, _, _, _, _) -> 28;
n(29, _, _, _, _, _, _) -> 29;

n(30, _, _, _, _, _, _) -> 30;
n(31, _, _, _, _, _, _) -> 31;
n(32, _, _, _, _, _, _) -> 32;
n(33, _, _, _, _, _, _) -> 33;
n(34, _, _, _, _, _, _) -> 34;
n(35, _, _, _, _, _, _) -> 35;
n(36, _, _, _, _, _, _) -> 36;
n(37, _, _, _, _, _, _) -> 37;
n(38, _, _, _, _, _, _) -> 38;
n(39, _, _, _, _, _, _) -> 39;

n(40, _, _, _, _, _, _) -> 40;
n(41, _, _, _, _, _, _) -> 41;
n(42, _, _, _, _, _, _) -> 42;
n(43, _, _, _, _, _, _) -> 43;
n(44, _, _, _, _, _, _) -> 44;
n(45, _, _, _, _, _, _) -> 45;
n(46, _, _, _, _, _, _) -> 46;
n(47, _, _, _, _, _, _) -> 47;
n(48, _, _, _, _, _, _) -> 48;
n(49, _, _, _, _, _, _) -> 49;

n(50, _, _, _, _, _, _) -> 50;
n(51, _, _, _, _, _, _) -> 51;
n(52, _, _, _, _, _, _) -> 52;
n(53, _, _, _, _, _, _) -> 53;
n(54, _, _, _, _, _, _) -> 54;
n(55, _, _, _, _, _, _) -> 55;
n(56, _, _, _, _, _, _) -> 56;
n(57, _, _, _, _, _, _) -> 57;
n(58, _, _, _, _, _, _) -> 58;
n(59, _, _, _, _, _, _) -> 59;

n(60, _, _, _, _, _, _) -> 60;
n(61, _, _, _, _, _, _) -> 61;
n(62, _, _, _, _, _, _) -> 62;
n(63, _, _, _, _, _, _) -> 63;
n(64, _, _, _, _, _, _) -> 64;
n(65, _, _, _, _, _, _) -> 65;
n(66, _, _, _, _, _, _) -> 66;
n(67, _, _, _, _, _, _) -> 67;
n(68, _, _, _, _, _, _) -> 68;
n(69, _, _, _, _, _, _) -> 69;

n(70, _, _, _, _, _, _) -> 70;
n(71, _, _, _, _, _, _) -> 71;
n(72, _, _, _, _, _, _) -> 72;
n(73, _, _, _, _, _, _) -> 73;
n(74, _, _, _, _, _, _) -> 74;
n(75, _, _, _, _, _, _) -> 75;
n(76, _, _, _, _, _, _) -> 76;
n(77, _, _, _, _, _, _) -> 77;
n(78, _, _, _, _, _, _) -> 78;
n(79, _, _, _, _, _, _) -> 79;

n(80, _, _, _, _, _, _) -> 80;
n(81, _, _, _, _, _, _) -> 81;
n(82, _, _, _, _, _, _) -> 82;
n(83, _, _, _, _, _, _) -> 83;
n(84, _, _, _, _, _, _) -> 84;
n(85, _, _, _, _, _, _) -> 85;
n(86, _, _, _, _, _, _) -> 86;
n(87, _, _, _, _, _, _) -> 87;
n(88, _, _, _, _, _, _) -> 88;
n(89, _, _, _, _, _, _) -> 89;

n(90, _, _, _, _, _, _) -> 90;
n(91, _, _, _, _, _, _) -> 91;
n(92, _, _, _, _, _, _) -> 92;
n(93, _, _, _, _, _, _) -> 93;
n(94, _, _, _, _, _, _) -> 94;
n(95, _, _, _, _, _, _) -> 95;
n(96, _, _, _, _, _, _) -> 96;
n(97, _, _, _, _, _, _) -> 97;
n(98, _, _, _, _, _, _) -> 98;
n(99, _, _, _, _, _, _) -> 99.


